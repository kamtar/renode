name: Sync Fork with Upstream

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  sync-fork:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          # Try renode/renode first, if it doesn't exist, use antmicro/renode
          git remote add upstream https://github.com/renode/renode.git 2>/dev/null || git remote add upstream https://github.com/antmicro/renode.git || true
          git fetch upstream

      - name: Sync with upstream using ours strategy
        run: |
          # Get current branch name
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH"

          # Try to merge upstream/master, use master if it exists, otherwise main
          UPSTREAM_BRANCH="master"
          if ! git rev-parse --verify upstream/master >/dev/null 2>&1; then
            UPSTREAM_BRANCH="main"
          fi

          echo "Merging from upstream/$UPSTREAM_BRANCH"

          # Merge with ours strategy for conflicts
          if git merge upstream/$UPSTREAM_BRANCH -X ours --no-edit; then
            echo "Merge successful without conflicts"
          else
            echo "Merge had conflicts, resolving with ours strategy"
            # Accept all our changes for conflicts
            git checkout --ours .
            git add -A
            if ! git diff --cached --quiet; then
              git commit --no-edit || git commit -m "Sync with upstream (conflicts resolved with ours strategy)"
            fi
          fi

      - name: Trigger renode-infrastructure sync
        run: |
          # Trigger the sync workflow in kamtar/renode-infrastructure
          # Use PAT if available, otherwise use GITHUB_TOKEN
          AUTH_TOKEN="${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}"

          echo "Triggering renode-infrastructure sync workflow..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/kamtar/renode-infrastructure/actions/workflows/sync-fork.yml/dispatches \
            -d '{"ref":"master"}')

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          echo "HTTP response code: $HTTP_CODE"

          if [ "$HTTP_CODE" -eq 204 ]; then
            echo "Workflow triggered successfully"
            # Wait for the workflow to complete (wait 2 minutes)
            echo "Waiting for renode-infrastructure sync to complete..."
            sleep 120
          else
            echo "Warning: Failed to trigger workflow or workflow doesn't exist yet (HTTP $HTTP_CODE)"
            echo "Continuing with submodule update..."
          fi

      - name: Update renode-infrastructure submodule
        run: |
          cd src/Infrastructure

          # Fetch latest changes from kamtar/renode-infrastructure
          git fetch origin

          # Check which branch exists (master or main)
          BRANCH="master"
          if ! git rev-parse --verify origin/master >/dev/null 2>&1; then
            BRANCH="main"
          fi

          echo "Using branch: $BRANCH"

          # Get the latest commit from the branch
          git checkout origin/$BRANCH
          LATEST_COMMIT=$(git rev-parse HEAD)
          echo "Latest commit in renode-infrastructure: $LATEST_COMMIT"

          cd ../..

          # Update the submodule reference
          git add src/Infrastructure

          # Check if there are changes to commit
          if ! git diff --cached --quiet; then
            git commit -m "Update renode-infrastructure submodule to latest commit"
          else
            echo "No submodule update needed"
          fi

      - name: Push changes
        run: |
          git push origin HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
